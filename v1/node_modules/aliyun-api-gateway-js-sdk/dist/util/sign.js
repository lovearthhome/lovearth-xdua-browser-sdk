"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = __importDefault(require("lodash"));
const url_parse_1 = __importDefault(require("url-parse"));
const contentTypes_1 = require("../constants/contentTypes");
const buildURL_1 = require("./buildURL");
const sort_1 = require("./sort");
function buildUrl(url, params, data) {
    const parsedUrl = url_parse_1.default(url, true);
    let newParams = sort_1.sortKey(Object.assign({}, parsedUrl.query, params));
    let paramsString = buildURL_1.buildParams(newParams);
    if (lodash_1.default.isNil(data)) {
        if (paramsString === '') {
            return parsedUrl.pathname;
        }
        else {
            return parsedUrl.pathname + '?' + paramsString;
        }
    }
    let dataString = JSON.stringify(data);
    if (paramsString === '') {
        return parsedUrl.pathname + '?' + dataString;
    }
    else {
        return parsedUrl.pathname + '?' + paramsString + '&' + dataString;
    }
}
function buildStringToSign(method, headers, signedHeaders, url, data, params) {
    const lf = '\n';
    const list = [method, lf];
    list.push('application/json, text/plain, */*');
    list.push(lf);
    const contentMD5 = headers['content-md5'];
    if (contentMD5) {
        list.push(contentMD5);
    }
    list.push(lf);
    const contentType = headers['content-type'] || '';
    if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        list.push(contentType);
    }
    list.push(lf);
    const date = headers['date'];
    if (date) {
        list.push(date);
    }
    list.push(lf);
    if (signedHeaders) {
        list.push(signedHeaders);
        list.push(lf);
    }
    if (contentType.startsWith(contentTypes_1.CONTENT_TYPE_FORM) && !lodash_1.default.isNil(data)) {
        list.push(buildUrl(url, params, data));
    }
    else {
        list.push(buildUrl(url, params));
    }
    return list.join('');
}
exports.buildStringToSign = buildStringToSign;
//# sourceMappingURL=sign.js.map